using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Temporal.Sdk.StubGenerator
{
    internal class WorkflowStubTemplateProvider
    {
        public static readonly WorkflowStubTemplateProvider SingletonInstance = new();

        private static readonly object s_ioLock = new();

        private string[] _rawTemplateLines = null;

        private StringBuilder _mainTemplate = null;

        private StringBuilder _execWorkflow1ArgTemplate = null;

        private StringBuilder _sendSignal0ArgTemplate = null;
        private StringBuilder _sendSignal1ArgTemplate = null;

        private StringBuilder _execQuery0ArgTemplate = null;

        private static void ValidateTemplateInputparameter(string templateParameter, string templateParameterName)
        {
            if (String.IsNullOrEmpty(templateParameterName))
            {
                templateParameterName = "template parameter";
            }

            if (templateParameter == null)
            {
                throw new ArgumentNullException(templateParameterName);
            }

            if (templateParameter.Length == 0)
            {
                throw new ArgumentException($"`{templateParameterName}` may not be empty.");
            }

            if (String.IsNullOrWhiteSpace(templateParameter))
            {
                throw new ArgumentException($"`{templateParameterName}` may not be whitespace-only");
            }

            if (templateParameter.StartsWith("__") && templateParameter.EndsWith("_Template__"))
            {
                throw new ArgumentException($"`{templateParameterName}` may start with \"__\" and end with \"_Template__\".");
            }
        }

        private string[] GetRawTemplateLines()
        {
            string[] rawTemplateLines = _rawTemplateLines;
            if (rawTemplateLines == null)
            {
                lock (s_ioLock)
                {
                    rawTemplateLines = _rawTemplateLines;
                    if (rawTemplateLines == null)
                    {
                        rawTemplateLines = File.ReadAllLines(PoC_Hardcodings.SourceBaseDir
                                                       + @"\TemporalStubGenerator\Temporal.Sdk.AutoGeneratedCodeTemplates\Template__WorkflowStub__.cs");

                        _rawTemplateLines = rawTemplateLines;
                    }
                }
            }

            return rawTemplateLines;
        }

        private StringBuilder GetTemplate(ref StringBuilder templateCache, string enterLine, string leaveLine)
        {
            return GetTemplate(ref templateCache, new string[] { enterLine }, new string[] { leaveLine });
        }

        private StringBuilder GetTemplate(ref StringBuilder templateCache, string[] enterLines, string[] leaveLines)
        {
            StringBuilder template = templateCache;
            if (template != null)
            {
                return template;
            }

            string[] rawTemplateLines = GetRawTemplateLines();

            template = new StringBuilder();

            bool isInTemplate = false;
            foreach (string line in rawTemplateLines)
            {
                if (line == null)
                {
                    continue;
                }

                string trimmedLine = line.TrimStart();

                if (!isInTemplate)
                {
                    foreach (string enterLine in enterLines)
                    {
                        if (trimmedLine.StartsWith(enterLine))
                        {
                            isInTemplate = true;
                            break;
                        }
                    }

                    continue;
                }

                if (isInTemplate)
                {
                    foreach (string leaveLine in leaveLines)
                    {
                        if (trimmedLine.StartsWith(leaveLine))
                        {
                            isInTemplate = false;
                            break;
                        }
                    }

                    if (isInTemplate)
                    {
                        template.AppendLine(line);
                    }

                    continue;
                }
            }

            templateCache = template;
            return template;
        }

        public string MergeSections(StringBuilder mainSection, List<StringBuilder> subsections)
        {
            const string SubsectionsPlaceMarker = "/* __SubTemplates_Template__ */";

            StringBuilder inner = new();
            foreach (StringBuilder subsection in subsections)
            {
                inner.AppendLine(subsection.ToString());
            }

            string merged = mainSection.ToString().Replace(SubsectionsPlaceMarker, inner.ToString());
            return merged;
        }

        public StringBuilder GetMainSection(string workflowStubNamespace,
                                            string workflowStubClassName,
                                            string workflowImplTypeFullName,
                                            string workflowImplTypeAssembly)
        {
            ValidateTemplateInputparameter(workflowStubNamespace, nameof(workflowStubNamespace));
            ValidateTemplateInputparameter(workflowStubClassName, nameof(workflowStubClassName));
            ValidateTemplateInputparameter(workflowImplTypeFullName, nameof(workflowImplTypeFullName));
            ValidateTemplateInputparameter(workflowImplTypeAssembly, nameof(workflowImplTypeAssembly));

            StringBuilder template = GetTemplate(ref _mainTemplate,
                                                 new string[] { "#region MAIN_TEMPLATE", "#endregion SUB_TEMPLATES" },
                                                 new string[] { "#endregion MAIN_TEMPLATE", "#region SUB_TEMPLATES" });

            StringBuilder section = new(template.ToString());

            section.Replace("__Namespace_Template__", workflowStubNamespace);
            section.Replace("__WorkflowStubClass_Template__", workflowStubClassName);
            section.Replace("__WorkflowImplementationType_Template__", workflowImplTypeFullName);
            section.Replace("__WorkflowImplementationTypeAsm_Template__", workflowImplTypeAssembly);

            return section;
        }

        public StringBuilder GetExecWorkflow1ArgNotVoidSection(string execWorkflowMethodName,
                                                               string workflowInputArgType,
                                                               string workflowResultType,
                                                               string worklowTypeName)
        {
            ValidateTemplateInputparameter(execWorkflowMethodName, nameof(execWorkflowMethodName));
            ValidateTemplateInputparameter(workflowInputArgType, nameof(workflowInputArgType));
            ValidateTemplateInputparameter(workflowResultType, nameof(workflowResultType));
            ValidateTemplateInputparameter(worklowTypeName, nameof(worklowTypeName));

            StringBuilder template = GetTemplate(ref _execWorkflow1ArgTemplate,
                                                 "#region TEMPLATE: ExecWorkflow-1Arg-NotVoid",
                                                 "#endregion TEMPLATE: ExecWorkflow-1Arg-NotVoid");

            StringBuilder section = new(template.ToString());

            section.Replace("__ExecWorkflowMethodName_Template__", execWorkflowMethodName);
            section.Replace("__WfInputArgType_Template__", workflowInputArgType);
            section.Replace("__WfResultType_Template__", workflowResultType);
            section.Replace("__WorkflowTypeName_Template__", worklowTypeName);

            return section;
        }

        public StringBuilder GetSendSignal0ArgSection(string sendSignalMethodName, string signalTypeName)
        {
            ValidateTemplateInputparameter(sendSignalMethodName, nameof(sendSignalMethodName));
            ValidateTemplateInputparameter(signalTypeName, nameof(signalTypeName));

            StringBuilder template = GetTemplate(ref _sendSignal0ArgTemplate,
                                                 "#region TEMPLATE: SendSignal-0Arg",
                                                 "#endregion TEMPLATE: SendSignal-0Arg");

            StringBuilder section = new(template.ToString());

            section.Replace("__SendSignalMethodName_Template__", sendSignalMethodName);
            section.Replace("__SignalTypeName_Template__", signalTypeName);

            return section;
        }

        public StringBuilder GetSendSignal1ArgSection(string sendSignalMethodName, string signalInputArgType, string signalTypeName)
        {
            ValidateTemplateInputparameter(sendSignalMethodName, nameof(sendSignalMethodName));
            ValidateTemplateInputparameter(signalInputArgType, nameof(signalInputArgType));
            ValidateTemplateInputparameter(signalTypeName, nameof(signalTypeName));

            StringBuilder template = GetTemplate(ref _sendSignal1ArgTemplate,
                                                 "#region TEMPLATE: SendSignal-1Arg",
                                                 "#endregion TEMPLATE: SendSignal-1Arg");

            StringBuilder section = new(template.ToString());

            section.Replace("__SendSignalMethodName_Template__", sendSignalMethodName);
            section.Replace("__SigInputArgType_Template__", signalInputArgType);
            section.Replace("__SignalTypeName_Template__", signalTypeName);

            return section;
        }

        public StringBuilder GetExecQuery0ArgSection(string execQueryMethodName, string execQueryResultType, string queryTypeName)
        {
            ValidateTemplateInputparameter(execQueryMethodName, nameof(execQueryMethodName));
            ValidateTemplateInputparameter(execQueryResultType, nameof(execQueryResultType));
            ValidateTemplateInputparameter(queryTypeName, nameof(queryTypeName));

            StringBuilder template = GetTemplate(ref _execQuery0ArgTemplate,
                                                 "#region TEMPLATE: ExecQuery-0Arg",
                                                 "#endregion TEMPLATE: ExecQuery-0Arg");

            StringBuilder section = new(template.ToString());

            section.Replace("__ExecQueryMethodName_Template__", execQueryMethodName);
            section.Replace("__QryResultType_Template__", execQueryResultType);
            section.Replace("__QueryTypeName_Template__", queryTypeName);

            return section;
        }
    }
}


